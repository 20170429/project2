             +--------------------------+
             |          EE 415          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kim Geonho <kgh0720kgh@kaist.ac.kr>
Yoon Seokbum <jing9044@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

sigaction, sendsig, sched_yield를 extra credit을 위해 구현하였습니다.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

추가 X.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

strtok_r 함수를 사용하여 command line을 공백을 기준으로 tokenize한 다음, 첫 번째 token을 file name으로 설정하고 모든 token을 argv[]로, token의 갯수를 argc로 설정하였다. 
argument_stack 함수에서는 
1. argv[argc - 1] ~ argv[0] 순으로 각각이 가리키는 string을 길이에 맞게 stack pointer(esp)에 값을 빼가면서 arrange.
2. 1.에서 4의 배수에 맞지 않게 주소값이 설정되면 이를 맞추기 위해(word align) 적당한 dummy 값을 추가.
3. argv[argc] ~ argv[0] 순으로 각 값을 arrange.
4. argv, argc, return address 순으로 arrange.
의 순서로 진행하여 올바른 arrange가 가능하도록 했다. 

올바르게 stack을 set up 했다는 가정하에 overflow가 발생하는 것을 방지하기 위해 command에 대응되는 syscall이 발생할 때마다 syscall 관련 함수에 사용되는 변수의 pointer가
stack page를 벗어나는지를 is_user_vaddr 함수를 통해 check하였고 만약 invalid한 경우 exit(-1)을 호출하여 문제를 해결하였다.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok의 함수 원형은 다음과 같다. 

char *
strtok (char *s, const char *delim)
{
  static char *olds;
  return __strtok_r (s, delim, &olds);
}

여기서 문제점은 static 변수인 olds를 사용한다는 것이다. static 변수는 어디서나 접근이 가능하기 때문에 multi thread에서 사용하게 되면 문제가 발생할 수 있다.
따라서 strtok_r을 사용하여 strtok의 old를 함수의 변수로 받아서 사용하게 되면 보다 안전한 함수의 활용이 가능해진다.
특히 pintos의 경우 kernel이 command를 executable name과 argument를 분리하기 때문에 strtok_r을 사용하야한다.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. kernel에 command를 pass하기 전에 미리 executable과 arguments가 적합한지를 확인하여 kernel의 fail을 방지할 수 있어 보다 확실한 check가 가능하다.
2. kernel에서 소요되는 시간을 줄일 수 있다.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1. struct thread에 추가한 member들

struct semaphore exit_wait: parent가 child의 exit를 기다리기 위해 사용되는 sema.       
struct semaphore status_wait: parent가 exit status를 update하기 전에 child가 exit되는 것을 방지하는 sema.
struct semaphore load_wait: parent가 child의 load를 기다리기 위해 사용되는 sema.     
struct file *fd_table[64]: file descriptor table.          
struct file *running_file: denying writes to excutable을 위해 현재 modify중인 file을 저장.    
struct list child: child들의 list.
struct thread *parent: parent pointer.                  
struct list_elem child_elem: child list를 사용하기 위한 list elem.       
int exit_status: exit할 때 출력되는 status 값. 
void (*signal_handler[3])(void): signal handler pointer 배열. signal_handler[signum - 1]에 signum에 대응되는 signal handler pointer값이 저장된다. 

2. struct lock filesys_lock (syscall.h에 선언)

file 관련 함수들에서 race condition을 방지하기 위해 사용된다.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

file descriptor는 실행중인 프로세스마다 정의된다. 따라서 프로세스마다 다른 file descriptor를 가지고 있으며 이는 프로세스가 각각 자신의 프로세스 내에서 filesystem을 관리할 수 있기에 용이하다. 
file descriptor table은 file마다 고유의 fd를 부여해서 fd position entry에 file을 저장하므로 fd에 따른 file 관리가 이루어질 수 있게 한다.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

1) Reading :
read가 userprogram 내에서 호출되면 system call에 의해 userprog/syscall 내 read 함수가 호출된다. 이때 인자로 받은 fd에 따라 fild descriptor table을 통해 그에 matching되는 file을 가져와 file_read 함수를
통하여 reading을 시도한다. 이때 함수의 return value는 reading에 성공한 byte 수를 돌려주므로 이를 통해 성공 여부를 알 수 있다. fd 인자가 0인 경우엔 stdin으로부터 read하기로 약속하였으므로 input_getc 함수를
호출한다.

2) Writing :
read와 마찬가지로 userprog/syscall 내 write 함수가 호출되면 인자로 받은 fd에 따라 file descriptor table을 통해 해당하는 file을 가져와 file_write를 호출한다. 여기서 return value는 읽어낸 byte의 수이며
fd 인자가 1인 경우엔 stdout에 write하기 위해(ex) printf ) putbuf 함수를 호출한다.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

i) number of inspection :
만약 pagedir_get_page를 통해 page의 head를 얻어낸다면 한 번의 inspection만으로 결과를 얻을 수 있다. 만약 그렇지 않아도 page table을 통해 다음 page를 mapping하면 되므로 최대 두 번의 inspection만으로
얻어낼 수 있다.

ii) copying 2 bytes of data :
least case의 경우 당연히 한 번이며 mapping에 실패하여도 page end에서 1byte 추가한 곳에 mapping을 하면 되므로 greatest case 역시 두 번이다.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

system call 내에서 wait를 호출하면 process_wait를 호출한다. process_wait는 현재 실행 중인 thread가 자신의 children이 process를 마치기 전에 먼저 종료되지 않게 하기 위한 함수이다. process가 child를 낳고 낳는 상황 또한 고려하기 위하여 process가 자신의 child만을 기다릴 수 있도록 implement하였다. thread.h 내에 thread structure에
semaphore structure를 추가하여 child가 만들어지고 child가 process를 수행하게 되면 sema_down을 통해 자신과 child만의 공유자원이 발생할 때까지 기다릴 수 있게 만들었다. 그 다음 child가 exit 단계에 접어들 때
sema_up을 호출함으로써 공유자원이 발생하게 되는 순간이 child가 종료되는 순간이 되게끔 하여 wait를 구현하였다. 이때 wait의 return value는  tid가 invalid하거나 child가 kernel에 의해 terminated 되었으며 -1을
return하며 child_tid를 가진 thread가 자신의 자식이 맞다면 이 child가 종료될 당시에 return했던 exit_status를 반환한다. 

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

is_user_vaddr 함수를 모든 system call 종류에 따라 호출하여 invalidation을 확인하였다. 이때 각 system call마다 parameter의 개수가 다르므로 각 parameter가 유효한 pointer address를 가지는지 또한 하나씩
체크해주었다. 그럼에도 error가 계속 발생하는 경우, 예를 들어 bad-jump2-test에서 *(int *)0xC0000000 = 42 등의 코드와 같은 경우 page_fault 함수 내에서도 is_valid_ptr과 user, not_present parameter가 
false인지를 체크하여 false가 되면 exit(-1)을 호출하도록 구현하였다. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

질문에서 언급한 상황을 위해 semaphore(load_wait)를 활용하여 synchronization을 진행했다.
process_execute 함수에서 thread_create를 실행하게 되면 새롭게 생성된 thread가 start_process 함수를 진행하게 된다. 그리고 start_process에서 load를 수행한다.
따라서 다음과 같이 sema_down, sema_up을 위치시켰다.

1. process_execute에서 thread_create 이후 sema_down(&cur->load_wait) 위치 : loading the new executable이 완료될 때까지 대기.
2. start_process에서 load 함수가 호출된 이후 sema_up(&cur->parent->load_wait) 위치 : load가 끝났음을 알림.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

1. P가 C가 exit되기 전에 wait(C)를 호출.
semaphore exit_wait를 사용하였다. wait에서 exit_wait을 변수로 sema_down을 하고, child가 exit 될 때 sema_up을 진행하여 P가 C가 exit되는 것을 기다리도록 설정하였다.

2. P가 C가 exit된 후에 wait(C)를 호출.
wait에서 P의 child들을 모두 탐색하기 때문에 이미 C가 exit했다면 탐색에 실패하여 -1을 return한다.

3. P가 C가 exit되기 전에 waiting 없이 종료되었을 때 resource free.

4. P가 C가 exit된 후에 waiting 없이 종료되었을 때 resource free.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Method1을 사용하였다. is_user_vaddr을 활용하여 user provided pointer가 valid 한지 확인한 후 access를 진행하였다.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

struct thread에 새로운 member로 file descriptor table(fd_table)을 추가하였다.
fd_table[fd]에는 해당 file pointer가 저장되어 있다.(fd에 대응되는 file이 없다면 NULL이 저장되어있다.) 배열의 크기는 64이다.
위와 같은 방식으로 구현하면 for문을 활용하여 fd가 작은 값부터 file을 저장할 수 있어 memory를 효율적으로 쓸 수 있지만,
file의 갯수가 64를 넘어가게 되면 overflow가 발생하는 단점이 있다.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

변경 x.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
